spring:
  #민감정보
#  config:
#    location: classpath:/naver-cloud-config.yml
  # cloud에서 8시간 전시간으로 처리되어 한국으로 명시
  jackson:
    time-zone: Asia/Seoul
  #DB
  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
    #로컬개발
    #url:  #운영
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  # JPA
  jpa:
    hibernate:
      # create : entity를 drop cascade 하고 다시 생성
      # update : entity가 수정되면 수정된 내용만 반영
      # create-drop,validate, none
      # 하이버네이트가 자동으로 생성해주는 DDL은 신뢰성이 떨어지기 때문에
      # 절대로! 운영DB 환경에서 그대로 사용하면 안되고, 직접 DDL을 작성하는 것을 권장
       ddl-auto: none
       naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl #이걸 해야 JPA가 SQL작성 시 대문자를 소문자로 변경 안함

    properties: # Additional native properties to set on the JPA provider.
      hibernate:
        show-sql: true                  # System.out 으로 출력
        format_sql: true                 # 로그, 콘솔의 SQL을 좀 더 이쁘게 출력합니다.
        highlight_sql: true             # SQL 출력을 ANSI escape codes를 사용하여 색을 부여합니다.
        #use_sql_comments: true          # 보다 쉬운 디버깅을 위해 SQL 내부에 /* */의 주석을 추가합니다.

  # Logging
  logging:
    level: # 각 package 별로 로깅 레벨을 지정할 수 있다.
      org.hibernate.SQL: DEBUG                    # logger를 통해 하이버네이트 실행 SQL
      org.hibernate.type: trace                   # 콘솔차에 조건에 바인딩되는 값 및 조회 결과 출력
      org.hibernate.type.descriptor.sql: trace    # sql의 ? 값을 Parameter로 보여줌.
      org.hibernate.type.descriptor.sql.BasicBinder: TRACE

  # 소셜 로그인 관련
  security:
    oauth2:
      client:
        registration:
          naver:  # OAuth2 클라이언트 이름 (URL 경로에서 {registrationId}로 사용됨)
            client-id: ${NAVER_LOGIN_CLIENT_ID}  # 네이버 애플리케이션에서 발급받은 Client ID (환경변수 사용)
            client-secret: ${NAVER_LOGIN_CLIENT_SECRET}  # 네이버 애플리케이션에서 발급받은 Client Secret (환경변수 사용)
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"  # 로그인 후 네이버가 redirect할 콜백 주소
            authorization-grant-type: authorization_code  # 권한 요청 방식 (고정)
            scope:  # 네이버에 요청할 사용자 정보 범위
              - email
              - gender
              - age
              - birthyear
              - name  # 선택 정보이지만 추가로 받고 싶다면 포함
            client-name: Naver  # 표시용 이름 (UI 등에서 사용, 필수는 아님)
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize  # 네이버 로그인 페이지 URI
            token-uri: https://nid.naver.com/oauth2.0/token  # access_token 발급 요청 URI
            user-info-uri: https://openapi.naver.com/v1/nid/me  # 사용자 정보 요청 URI
            user-name-attribute: response  # 사용자 정보 JSON에서 최상위 키 (네이버는 응답이 response 키 안에 있음)